#!/usr/bin/env python


from __future__ import print_function

import sys
from traceback import format_tb


from circuits.web.errors import httperror
from circuits.web import Controller, Server
from circuits.web.exceptions import NotFound
from circuits import handler, Event, Component

from jinja2 import Environment, FileSystemLoader, TemplateNotFound


DEFAULTS = {
    "appname": "todoapp",
    "version": "dev",
}


class render(Event):
    """render Event"""


class JinjaTemplate(object):

    def __init__(self, name, context=None):
        self.name = name
        self.context = context or {}


class JinjaRenderer(Component):

    channel = "web"

    def init(self, path, defaults=None):
        self.path = path
        self.defaults = defaults or {}

        self.env = Environment(loader=FileSystemLoader(path))

    @handler("response", priority=1.0)
    def serialize_response_body(self, event, response):
        template = response.body
        if not isinstance(template, JinjaTemplate):
            return

        try:
            request = response.request

            try:
                tmpl = self.env.get_template("{0}.html".format(template.name))
            except TemplateNotFound:
                raise NotFound()

            ctx = self.defaults.copy()
            ctx.update({"request": request, "response": response, "uri": request.uri})

            ctx.update(template.context)

            response.body = tmpl.render(**ctx)
        except:
            event.stop()
            evalue, etype, etraceback = sys.exc_info()
            error = (evalue, etype, format_tb(etraceback))
            self.fire(httperror(request, response, 500, error=error))


class Root(Controller):

    def GET(self, *args, **kwargs):
        return JinjaTemplate("views/index")


class Add(Controller):

    channel = "/add"

    def GET(self, *args, **kwargs):
        return JinjaTemplate("views/add")

    def POST(self, *args, **kwargs):
        return self.redirect(self.uri("/"))


app = Server(("0.0.0.0", 8000))

Root().register(app)
Add().register(app)
JinjaRenderer("templates", defaults=DEFAULTS).register(app)

app.run()
